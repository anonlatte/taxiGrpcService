syntax = "proto3";
package v1;

import "google/protobuf/timestamp.proto";

// Tables //
message Customer {
    int32 id = 1;
    string name = 2;
    string phoneNumber = 3;
    string email = 4;
    string password = 5;
    string authToken = 6;
    google.protobuf.Timestamp create_time = 7;
    google.protobuf.Timestamp update_time = 8;
}

message Driver {
    int32 id = 1;
    string firstName = 2;
    string surname = 3;
    string partronymic = 4;
    google.protobuf.Timestamp birthDate = 5;
    string phoneNumber = 6;
    bool working = 7;
    string email = 8;
    string password = 9;
    string authToken = 10;
    bool activated = 11;
    google.protobuf.Timestamp create_time = 12;
    google.protobuf.Timestamp update_time = 13;
}

message DriverDocuments {
    int32 id = 1;
    int32 driverId = 2;
    string passportNumber = 3;
    bytes passportImage = 4;
    string drivingLicenseNumber = 5;
    google.protobuf.Timestamp expiryDate = 6;
    bytes drivingLicenseImage = 7;
    bytes stsPhoto = 8;
}

message Dispatcher {
    int32 id = 1;
    string firstName = 2;
    string surname = 3;
    string partronymic = 4;
    string phoneNumber = 5;
    string email = 6;
    string password = 7;
    string authToken = 8;
    google.protobuf.Timestamp create_time = 9;
    google.protobuf.Timestamp update_time = 10;
}

message Color {
    int32 id = 1;
    int32 code = 2;
    string description = 3;
}

message Cab {
    int32 id = 1;
    int32 colorId = 2;
    string licensePlate = 3;
    int32 carModelId = 4;
    int32 driverId = 5;
    bool active = 6;
}

message CarModel {
    int32 id = 1;
    string modelName = 2;
    int32 carBrandId = 3;
}

message CarBrand {
    int32 id = 1;
    string brandName = 2;
}


message CabRide {
    int32 id = 1;
    int32 customerId = 2;
    int32 shiftId = 3;
    google.protobuf.Timestamp rideStartTime = 4;
    google.protobuf.Timestamp rideEndTime = 5;
    string startingPoint = 6;
    int32 entrance = 7;
    string endingPoint = 8;
    bool canceled = 9;
    bool orderForAnother = 10;
    bool pendingOrder = 11;
    int32 paymentTypeId = 12;
    int32 price = 13;
    string comment = 14;
    string feedback = 15;
}

message CabRideStatus {
    int32 id = 1;
    int32 cabRideId = 2;
    int32 shiftId = 3;
    int32 statusTime = 4;
    string statusDetails = 5;
    int32 ride_status = 6;
    int32 dispatcherId = 7;

}

message TokenCheckRequest {
    string api = 1;
    int32 userType = 2;
    string login = 3;
    string password = 4;
    string authToken = 5;
}

message TokenCheckResponse {
    string api = 1;
    bool isValidToken = 2;
}

message LoginRequest {
    string api = 1;
    string login = 2;
    string password = 3;
    int32 userType = 4;
}

message LoginResponse {
    string api = 1;
    string authToken = 2;
    int32 userId = 3;
}


message CreateCustomerRequest {
    string api = 1;
    Customer customer = 2;
}

message CreateCustomerResponse {
    string api = 1;
    int32 id = 2;
    string authToken = 3;
}

message ReadCustomerRequest {
    string api = 1;
    Customer customer = 2;
}

message ReadCustomerResponse {
    string api = 1;
    Customer customer = 2;
}

message UpdateCustomerRequest {
    string api = 1;
    Customer customer = 2;
}

message UpdateCustomerResponse {
    string api = 1;
    int32 updated = 2;
}

message DeleteCustomerRequest {
    string api = 1;
    Customer customer = 2;
}

message DeleteCustomerResponse {
    string api = 1;
    int32 deleted = 2;
}


message CreateDriverRequest {
    string api = 1;
    Driver driver = 2;
    DriverDocuments driverDocuments = 3;
}

message CreateDriverResponse {
    string api = 1;
    int32 id = 2;
    string authToken = 3;
}

message ReadDriverRequest {
    string api = 1;
    Driver driver = 2;
}

message ReadDriverResponse {
    string api = 1;
    Driver driver = 2;
    DriverDocuments driverDocuments = 3;
}

message UpdateDriverRequest {
    string api = 1;
    Driver driver = 2;
    DriverDocuments driverDocuments = 3;
}

message UpdateDriverResponse {
    string api = 1;
    int32 updated = 2;
}

message DeleteDriverRequest {
    string api = 1;
    Driver driver = 2;
}

message DeleteDriverResponse {
    string api = 1;
    int32 deleted = 2;
}

message CreateCabRideRequest {
    string api = 1;
    CabRide cabRide = 2;
    int32 price = 3;
    string authToken = 4;
}

message CreateCabRideResponse {
    string api = 1;
    int32 cabRideId = 2;
}

message UpdateCabRideRequest {
    string api = 1;
    CabRide cabRide = 2;
    string authToken = 3;
}

message UpdateCabRideResponse {
    string api = 1;
    CabRide cabRide = 2;
}

message DeleteCabRideRequest {
    string api = 1;
    int32 cabRideId = 2;
    int32 customerId = 3;
    string authToken = 4;
}

message DeleteCabRideResponse {
    string api = 1;
    bool isSuccessDeleted = 2;
}

message CheckCabRideStatusRequest {
    string api = 1;
    int32 cabRideId = 2;
    string authToken = 3;
}

message CheckCabRideStatusResponse {
    string api = 1;
    string firstName = 2;
    string surname = 3;
    string phoneNumber = 4;
    string licensePlate = 5;
    string color = 6;
    string modelName = 7;
    string brandName = 8;
    int32 rideStatus = 9;
}

message ReadAllCarBrandsRequest {
    string api = 1;
}

message ReadAllCarBrandsResponse {
    string api = 1;
    repeated CarBrand carBrand = 2;
}

message ReadAllCarModelsRequest {
    string api = 1;
    int32 carBrandId = 2;
}

message ReadAllCarModelsResponse {
    string api = 1;
    repeated CarModel carModels = 2;
}


message ReadAllColorsRequest {
    string api = 1;
}

message ReadAllColorsResponse {
    string api = 1;
    repeated Color color = 2;
}

// For drivers

/*
message ChangeStatusRequest {
    string api = 1;
    int32 driverId = 2;
}
message ChangeStatusResponse {
    string api = 1;
    bool isChanged = 2;
    int32 shiftId = 3;
}
*/

/*
message CheckAvailableRidesRequest {
        string api = 1;
        string latLng = 2;
}

message CheckAvailableRidesResponse {
    string api = 1;
}
*/

message IsAccountActivatedRequest {
    string api = 1;
    string driverLogin = 2;
}
message IsAccountActivatedResponse {
    string api = 1;
    bool isActivated = 2;
}


message CreateCabRequest {
    string api = 1;
    string licensePlate = 2;
    string carBrandName = 3;
    string carModelName = 4;
    string colorDescription = 5;
    int32 driverId = 6;
}
message CreateCabResponse {
    string api = 1;
    int32 cabId = 2;
}


message GetDriversCabsRequest {
    string api = 1;
    int32 driverId = 2;
}
message GetDriversCabsResponse {
    string api = 1;
    repeated Cab cabs = 2;
}

message StartShiftRequest {
    string api = 1;
    int32 driverId = 2;
}
message StartShiftResponse {
    string api = 1;
    bool isStarted = 2;
}

message StopShiftRequest {
    string api = 1;
    int32 driverId = 2;
}
message StopShiftResponse {
    string api = 1;
    bool isStopped = 2;
}

message CheckAvailableOrdersRequest {
    string api = 1;
    int64 latitude = 2;
    int64 longitude = 3;
    repeated int32 ignoredOrder = 4;
}
message CheckAvailableOrdersResponse {
    string api = 1;
    CabRide cabRide = 2;
}

message AcceptOrderRequest {
    string api = 1;
    int32 cabRideId = 2;
    int32 driverId = 3;
}
message AcceptOrderResponse {
    string api = 1;
    bool isAccepted = 2;
}

message CancelOrderRequest {
    string api = 1;
    int32 cabRideId = 2;
    int32 driverId = 3;
}
message CancelOrderResponse {
    string api = 1;
    bool isCanceled = 2;
}

message StartTripRequest {
    string api = 1;
    int32 cabRideId = 2;
    int32 driverId = 3;
}
message StartTripResponse {
    string api = 1;
    bool isStarted = 2;
}

message EndTripRequest {
    string api = 1;
    int32 cabRideId = 2;
    int32 driverId = 3;
}
message EndTripResponse {
    string api = 1;
    bool isEnded = 2;
}

// For dispatchers


message CreateDispatcherRequest {
    string api = 1;
    Dispatcher dispatcher = 2;
}

message CreateDispatcherResponse {
    string api = 1;
    int32 id = 2;
    string authToken = 3;
}

message CreateCabRideDispatcherRequest {
    string api = 1;
    CabRide cabRide = 2;
    Customer customer = 3;
    int32 price = 4;
    string authToken = 5;
}

message CreateCabRideDispatcherResponse {
    string api = 1;
    bool isCreated = 2;
    int32 cabRideId = 3;
}

message SetDetailsToOrderRequest {
    string api = 1;
    string message = 2;
    int32 cabRideId = 3;
}

message SetDetailsToOrderResponse {
    string api = 1;
    bool isUpdated = 2;
}


message ReadAllDriversRequest {
    string api = 1;
    string authToken = 2;
}

message ReadAllDriversResponse {
    string api = 1;
    repeated Driver driver = 2;
}

message VerifyDriversAccountRequest {
    string api = 1;
    int32 driverId = 2;
}

message VerifyDriversAccountResponse {
    string api = 1;
    bool isVerified = 2;
}

message ReadAllCustomersRequest {
    string api = 1;
    string authToken = 2;
}

message ReadAllCustomersResponse {
    string api = 1;
    repeated Customer customer = 2;
}

message ReadAllCabRidesRequest {
    string api = 1;
    string authToken = 2;
}

message ReadAllCabRidesResponse {
    string api = 1;
    repeated CabRide cabRide = 2;
}

message ReadCabRideStatusRequest {
    string api = 1;
    string authToken = 2;
    int32 cabRideId = 3;
}

message ReadCabRideStatusResponse {
    string api = 1;
    CabRideStatus cabRideStatus = 2;
}

message ReadDriverStatisticRequest {
    string api = 1;
    int32 driverId = 2;
}

message ReadDriverStatisticResponse {
    string api = 1;
    int32 endedCabRides = 2;
}

message ReadCustomerStatisticRequest {
    string api = 1;
    int32 customerId = 2;
}

message ReadCustomerStatisticResponse {
    string api = 1;
    int32 orderedCabRides = 2;
}

service taxiService {
    // Auth routes
    rpc LoginUser (LoginRequest) returns (LoginResponse);
    rpc TokenCheck (TokenCheckRequest) returns (TokenCheckResponse);

    // customer CRUD
    rpc CreateCustomer (CreateCustomerRequest) returns (CreateCustomerResponse);
    rpc ReadCustomer (ReadCustomerRequest) returns (ReadCustomerResponse);
    rpc ReadAllCustomers (ReadAllCustomersRequest) returns (ReadAllCustomersResponse);
    rpc UpdateCustomer (UpdateCustomerRequest) returns (UpdateCustomerResponse);
    rpc DeleteCustomer (DeleteCustomerRequest) returns (DeleteCustomerResponse);

    // driver CRUD
    rpc CreateDriver (CreateDriverRequest) returns (CreateDriverResponse);
    rpc ReadDriver (ReadDriverRequest) returns (ReadDriverResponse);
    rpc UpdateDriver (UpdateDriverRequest) returns (UpdateDriverResponse);
    rpc DeleteDriver (DeleteDriverRequest) returns (DeleteDriverResponse);

    // Cab ride routes
    rpc CreateCabRide (CreateCabRideRequest) returns (CreateCabRideResponse);
    rpc DeleteCabRide (DeleteCabRideRequest) returns (DeleteCabRideResponse);
    rpc UpdateCabRide (UpdateCabRideRequest) returns (UpdateCabRideResponse);
    rpc CheckCabRideStatus (CheckCabRideStatusRequest) returns (CheckCabRideStatusResponse);
    rpc ReadAllCabRides (ReadAllCabRidesRequest) returns (ReadAllCabRidesResponse);

    // CabRide status
    rpc ReadCabRideStatus (ReadCabRideStatusRequest) returns (ReadCabRideStatusResponse);

    // Cabs routes
    rpc ReadAllCarBrands (ReadAllCarBrandsRequest) returns (ReadAllCarBrandsResponse);
    rpc ReadAllCarModels (ReadAllCarModelsRequest) returns (ReadAllCarModelsResponse);
    rpc GetColors (ReadAllColorsRequest) returns (ReadAllColorsResponse);

    //    rpc ChangeDriverStatus (ChangeStatusRequest) returns (ChangeStatusResponse);
    rpc IsAccountActivated (IsAccountActivatedRequest) returns (IsAccountActivatedResponse);

    rpc AcceptOrder (AcceptOrderRequest) returns (AcceptOrderResponse);
    rpc CancelOrder (CancelOrderRequest) returns (CancelOrderResponse);
    rpc StartTrip (StartTripRequest) returns (StartTripResponse);
    rpc EndTrip (EndTripRequest) returns (EndTripResponse);

    rpc GetDriversCabs (GetDriversCabsRequest) returns (GetDriversCabsResponse);

    rpc StartShift (StartShiftRequest) returns (StartShiftResponse);
    rpc StopShift (StopShiftRequest) returns (StopShiftResponse);

    rpc CreateCab (CreateCabRequest) returns (CreateCabResponse);

    rpc CheckAvailableOrders (CheckAvailableOrdersRequest) returns (CheckAvailableOrdersResponse);

    // For dispatchers
    rpc CreateDispatcher (CreateDispatcherRequest) returns (CreateDispatcherResponse);
    rpc CreateCabRideDispatcher (CreateCabRideDispatcherRequest) returns (CreateCabRideDispatcherResponse);
    rpc SetDetailsToOrder (SetDetailsToOrderRequest) returns (SetDetailsToOrderResponse);
    rpc ReadAllDrivers (ReadAllDriversRequest) returns (ReadAllDriversResponse);
    rpc VerifyDriversAccount (VerifyDriversAccountRequest) returns (VerifyDriversAccountResponse);

    // Statistic
    rpc ReadDriverStatistic (ReadDriverStatisticRequest) returns (ReadDriverStatisticResponse);
    rpc ReadCustomerStatistic (ReadCustomerStatisticRequest) returns (ReadCustomerStatisticResponse);
}
